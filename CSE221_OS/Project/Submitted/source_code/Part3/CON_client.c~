#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <time.h>
#include <netdb.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <math.h>

typedef unsigned long long ticks;

ticks getticks(void)
{	
     unsigned a, d;
     asm volatile("rdtsc" : "=a" (a), "=d" (d));

     return (((ticks)a) | (((ticks)d) << 32));
}

int
main(int argc, char *argv[]){

	int listen_port;
	int msg_size;
	int tries;
	struct sockaddr_in serverAddr;
	struct sockaddr_in clientAddr;
    int sckTemp;
	int sckListen;
	socklen_t sinSize;
	int i, j, k;
	int tmp;
	char input[1000];
  	struct sockaddr_in switchAddr;
	int skt;

	if (argc!=5){  	
		printf("USAGE: ./CON_client <port> <IPAdress> <msg_size> <samples>\n");
		exit(1);
	}
  
	listen_port = atoi(argv[1]); 
	if(listen_port<1024 || listen_port>32768){
		printf("\nERROR! Invalid port\n");
		exit(1);
	}
  
	msg_size = atoi(argv[3]);
	if(msg_size < 1){
		printf("\nmsg_size\n");
		exit(1);
	}	

	tries = atoi(argv[4]);
	if(tries < 1){
		printf("\nsamples\n");
		exit(1);
	}	

	char msg[msg_size];
	ticks tear_results[tries];
	ticks setup_results[tries];  	
	ticks start, end;  
	  
	for(i=0; i<msg_size; i++){
		msg[i] = 'a';
	}
	msg[msg_size-1] = '\0';
		
	
	for(i=0; i<tries; i++){	
		switchAddr.sin_family = AF_INET;
		switchAddr.sin_port = htons(listen_port); 
		switchAddr.sin_addr.s_addr = inet_addr(argv[2]);
  
		skt = socket(AF_INET,SOCK_STREAM,0);
	
		start = getticks();
		
		if (connect(skt, (struct sockaddr *)&switchAddr, sizeof(switchAddr)) < 0){
			perror("connect error");
		}
		
		end = getticks();
		setup_results[i] = end-start;
		
		
		if(write(skt, msg, strlen(msg)) < 0){
			perror("write socket");
		} 

		bzero(input, sizeof (input)); 
		tmp = read(skt, input, sizeof (input));
	
		//Close socket
		start = getticks();
		close(skt); 
		end = getticks();
		tear_results[i] = end-start;
	}
	
	switchAddr.sin_family = AF_INET;
	switchAddr.sin_port = htons(listen_port); 
	switchAddr.sin_addr.s_addr = inet_addr(argv[2]);
	skt = socket(AF_INET,SOCK_STREAM,0);
	if (connect(skt, (struct sockaddr *)&switchAddr, sizeof(switchAddr)) < 0){
		perror("connect error");
	}
	if(write(skt, "END", strlen("END")) < 0){
		perror("write socket");
	}

	double setup_avg =0, tear_avg=0, setup_stdv=0, tear_stdv=0, setup_t, tear_t;
	ticks setup_sum, tear_sum =0;
	
	for(i=0; i<tries; i++){
		setup_sum+= setup_results[i];
		tear_sum+= tear_results[i];
	}	
	setup_avg = ((double)setup_sum)/tries;
	tear_avg = ((double)tear_sum)/tries;
	
	setup_t = setup_avg/3.5;
	tear_t = tear_avg/3.5;
	
	for(i=0; i<tries; i++){
		//printf("%llu\n", results[i]);
		setup_stdv += ((double)setup_results[i]-setup_avg)*((double)setup_results[i]-setup_avg);
		tear_stdv += ((double)tear_results[i]-tear_avg)*((double)tear_results[i]-tear_avg);		
	}
	tear_stdv = tear_stdv/tries;
	setup_stdv = setup_stdv/tries;
	tear_stdv = sqrt(tear_stdv);
	setup_stdv = sqrt(setup_stdv);

	printf("Setup:\tAverage cycles: %lf \n", setup_avg);
	printf("Tear:\tAverage cycles: %lf\n", tear_avg);
	
	return 0;
}
